#[derive(Clone, Debug, PartialEq)]
pub enum Op {
    // NOTE: currently removing paranthesis of enums to track if flags have been fully emulated & impl tested //martin, jan 2018
    Aaa,
    Aad,
    Aam,
    Aas,
    Adc8,
    Adc16,
    Add8,
    Add16,
    And8,
    And16,
    Arpl(),
    Bound(),
    Bsf,
    Bt,
    CallFar,
    CallNear,
    Cbw,
    Clc,
    Cld,
    Cli,
    Cmc,
    Cmp8,
    Cmp16,
    Cmpsb,
    Cmpsw,
    Cwd,
    Daa,
    Das,
    Dec8,
    Dec16,
    Dec32,
    Div8,
    Div16,
    Enter,
    Hlt(),
    Idiv8,
    Idiv16,
    Imul8,
    Imul16,
    In8,
    In16,
    Inc8,
    Inc16,
    Inc32,
    Insb,
    Insw,
    Int,
    Into(),
    Iret,
    Ja,
    Jc,
    Jcxz,
    Jg,
    Jl,
    JmpFar,
    JmpNear,
    JmpShort,
    Jna,
    Jnc,
    Jng,
    Jnl,
    Jno,
    Jns,
    Jnz,
    Jo,
    Jpe,
    Jpo,
    Js,
    Jz,
    Lahf,
    Lds,
    Lea16,
    Leave,
    Les,
    Lodsb,
    Lodsw,
    Loop,
    Loope,
    Loopne,
    Mov8,
    Mov16,
    Mov32,
    Movsb,
    Movsw,
    Movsx16(),
    Movzx16(),
    Mul8,
    Mul16,
    Neg8,
    Neg16,
    Nop,
    Not8,
    Not16,
    Or8,
    Or16,
    Out8,
    Out16,
    Outsb,
    Outsw,
    Pop16,
    Popa,
    Popf,
    Push16,
    Pusha,
    Pushf,
    Rcl8,
    Rcl16,
    Rcr8,
    Rcr16,
    Retf,
    Retn,
    RetImm16,
    Rol8,
    Rol16,
    Ror8,
    Ror16,
    Sahf,
    Salc,
    Sar8,
    Sar16,
    Sbb8,
    Sbb16,
    Scasb,
    Scasw,
    Setc,
    Setnz,
    Shl8,
    Shl16,
    Shld,
    Shr8,
    Shr16,
    Shrd,
    Sldt,
    Stc,
    Std,
    Sti,
    Stosb,
    Stosw,
    Sub8,
    Sub16,
    Test8,
    Test16,
    Xchg8,
    Xchg16,
    Xlatb,
    Xor8,
    Xor16,
    Unknown,
    Invalid(InvalidOp),
}

impl Op {
    pub fn is_valid(&self) -> bool {
        match *self {
            Op::Unknown | Op::Invalid(_) => false,
            _ => true,
        }
    }

    // used by encoder
    pub fn f6_index(&self) -> u8 {
        match *self {
            Op::Test8 => 0,
            Op::Not8  => 2,
            Op::Neg8  => 3,
            Op::Mul8  => 4,
            Op::Imul8 => 5,
            Op::Div8  => 6,
            Op::Idiv8 => 7,
            _ => panic!("f6_index {:?}", self),
        }
    }

    // used by encoder
    pub fn feff_index(&self) -> u8 {
        match *self {
            Op::Inc8 | Op::Inc16 | Op::Inc32 => 0,
            Op::Dec8 | Op::Dec16 | Op::Dec32 => 1,
            Op::CallNear => 2,
            // 3 => call far
            Op::JmpNear => 4,
            // 5 => jmp far
            Op::Push16 => 6,
            _ => panic!("feff_index {:?}", self),
        }
    }
}

#[derive(Clone, Debug, PartialEq)]
pub enum InvalidOp {
    Reg(u8),
    Op,
}
